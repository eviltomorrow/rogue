// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: repo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepoClient is the client API for Repo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepoClient interface {
	Build(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStockFull(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Repo_GetStockFullClient, error)
	GetQuoteLatest(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Repo_GetQuoteLatestClient, error)
}

type repoClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoClient(cc grpc.ClientConnInterface) RepoClient {
	return &repoClient{cc}
}

func (c *repoClient) Build(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/repository.Repo/Build", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoClient) GetStockFull(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Repo_GetStockFullClient, error) {
	stream, err := c.cc.NewStream(ctx, &Repo_ServiceDesc.Streams[0], "/repository.Repo/GetStockFull", opts...)
	if err != nil {
		return nil, err
	}
	x := &repoGetStockFullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Repo_GetStockFullClient interface {
	Recv() (*Stock, error)
	grpc.ClientStream
}

type repoGetStockFullClient struct {
	grpc.ClientStream
}

func (x *repoGetStockFullClient) Recv() (*Stock, error) {
	m := new(Stock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repoClient) GetQuoteLatest(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Repo_GetQuoteLatestClient, error) {
	stream, err := c.cc.NewStream(ctx, &Repo_ServiceDesc.Streams[1], "/repository.Repo/GetQuoteLatest", opts...)
	if err != nil {
		return nil, err
	}
	x := &repoGetQuoteLatestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Repo_GetQuoteLatestClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type repoGetQuoteLatestClient struct {
	grpc.ClientStream
}

func (x *repoGetQuoteLatestClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepoServer is the server API for Repo service.
// All implementations must embed UnimplementedRepoServer
// for forward compatibility
type RepoServer interface {
	Build(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetStockFull(*emptypb.Empty, Repo_GetStockFullServer) error
	GetQuoteLatest(*QuoteRequest, Repo_GetQuoteLatestServer) error
	mustEmbedUnimplementedRepoServer()
}

// UnimplementedRepoServer must be embedded to have forward compatible implementations.
type UnimplementedRepoServer struct {
}

func (UnimplementedRepoServer) Build(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedRepoServer) GetStockFull(*emptypb.Empty, Repo_GetStockFullServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStockFull not implemented")
}
func (UnimplementedRepoServer) GetQuoteLatest(*QuoteRequest, Repo_GetQuoteLatestServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuoteLatest not implemented")
}
func (UnimplementedRepoServer) mustEmbedUnimplementedRepoServer() {}

// UnsafeRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoServer will
// result in compilation errors.
type UnsafeRepoServer interface {
	mustEmbedUnimplementedRepoServer()
}

func RegisterRepoServer(s grpc.ServiceRegistrar, srv RepoServer) {
	s.RegisterService(&Repo_ServiceDesc, srv)
}

func _Repo_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repo/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServer).Build(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repo_GetStockFull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepoServer).GetStockFull(m, &repoGetStockFullServer{stream})
}

type Repo_GetStockFullServer interface {
	Send(*Stock) error
	grpc.ServerStream
}

type repoGetStockFullServer struct {
	grpc.ServerStream
}

func (x *repoGetStockFullServer) Send(m *Stock) error {
	return x.ServerStream.SendMsg(m)
}

func _Repo_GetQuoteLatest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepoServer).GetQuoteLatest(m, &repoGetQuoteLatestServer{stream})
}

type Repo_GetQuoteLatestServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type repoGetQuoteLatestServer struct {
	grpc.ServerStream
}

func (x *repoGetQuoteLatestServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

// Repo_ServiceDesc is the grpc.ServiceDesc for Repo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Repo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repository.Repo",
	HandlerType: (*RepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Build",
			Handler:    _Repo_Build_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStockFull",
			Handler:       _Repo_GetStockFull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetQuoteLatest",
			Handler:       _Repo_GetQuoteLatest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "repo.proto",
}
